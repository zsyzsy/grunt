{
  "name": "cssgrace",
  "version": "3.0.0",
  "description": "CSS postproccessor",
  "main": "lib/index.js",
  "author": {
    "name": "yisi",
    "email": "yiorsi@gmail.com",
    "url": "http://iyunlu.com/view"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git@github.com:cssdream/cssgrace.git"
  },
  "keywords": [
    "css",
    "css3",
    "css polyfill",
    "postcss",
    "postcss-plugins",
    "proccessor",
    "postproccessor"
  ],
  "dependencies": {
    "postcss": "^5.0.11",
    "image-size": "^0.3.5"
  },
  "devDependencies": {
    "tape": "^3.0.0"
  },
  "scripts": {
    "test": "tape test"
  },
  "readme": "\n# CSS Grace\n\n[![Build Status](https://travis-ci.org/cssdream/cssgrace.svg?branch=master)](https://travis-ci.org/cssdream/cssgrace) \n[![Build status](https://ci.appveyor.com/api/projects/status/github/cssdream/cssgrace?branch=master&svg=true)](https://ci.appveyor.com/project/yisibl/cssgrace/branch/master) \n[![NPM Downloads](https://img.shields.io/npm/dm/cssgrace.svg?style=flat)](https://www.npmjs.com/package/cssgrace) \n[![NPM Version](http://img.shields.io/npm/v/cssgrace.svg?style=flat)](https://www.npmjs.com/package/cssgrace) \n[![License](https://img.shields.io/npm/l/cssgrace.svg?style=flat)](http://opensource.org/licenses/MIT) \n\n  >**From now on,writing brief,elegant,future-oriented CSS.**\n\n--------------\n\n[简体中文](README-zh.md)\n\nCSS Grace is a plugin for PostCSS.It does not change the original grammar CSS, let CSS to write more simple and more elegant。\n\n\n![CSS Grace Gif Demo](http://gtms03.alicdn.com/tps/i3/TB1OXJaGpXXXXbbXFXXZ.oU0pXX-848-504.gif)\n\n\n![post and pre](test/img/post-and-pre.png)\n\n\n## Quick start\n\n1. Download and install Node.js.\n\n2. Installation cssgrace.\n\n```console\nnpm install cssgrace\n```\n\n3. test.js\n\n```console\nnpm install chokidar\n```\n\n```js\nvar fs       = require('fs')\nvar cssgrace = require('cssgrace')\n\nvar src = 'src/input.css'\nconsole.info('Watching…\\nModify the input.css and save.')\n\nchokidar.watch(src, {\n  ignored: /[\\/\\\\]\\./,\n  persistent: true\n}).on('all',\n  function(event, path, stats) {\n    var css = fs.readFileSync(src, 'utf8')\n    fs.writeFileSync('build/output.css', cssgrace.pack(css))\n  })\n```\n\n4. input.css：\n\n```css\n.foo::after {\n  position: center;\n  width: 210px;\n  height: 80px;\n  background: rgba(112, 26, 0, .3);\n}\n\n.bar {\n  display: inline-block;\n  opacity: .5;\n}\n```\n\n5. `node test`，we will get `output.css`.\n\n```css\n.foo:after {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  margin-left: -105px;\n  margin-top: -40px;\n  width: 210px;\n  height: 80px;\n  background: rgba(112, 26, 0, .3);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#4c701a00', endColorstr='#4c701a00');\n}\n\n:root .foo:after {\n  filter: none\\9;\n}\n\n.bar {\n  display: inline-block;\n  *display: inline;\n  *zoom: 1;\n  opacity: .5;\n  filter: alpha(opacity=50);\n}\n```\n\n-------------\n\n## How to use\n\n###  Node watch & With the other plugins\n\n\n```js\nvar fs       = require('fs')\nvar chokidar = require('chokidar')\nvar postcss  = require('postcss')\nvar cssgrace = require('cssgrace')\nvar nested   = require('postcss-nested') //CSS 代码嵌套\nvar minmax   = require('postcss-media-minmax') //使用 >=/<= 代替 @media 中的 min-/max\nvar selector = require('postcss-custom-selectors') //自定义选择器\n\n\nvar src = 'src/input.css'\n\nconsole.info('Watching…\\nModify the input.css and save.')\n\n\nchokidar.watch(src, {\n  ignored: /[\\/\\\\]\\./,\n  persistent: true\n}).on('all',\n  function(event, path, stats) {\n    var css = fs.readFileSync(src, 'utf8')\n    var output = postcss()\n      .use(minmax())\n      .use(cssgrace)\n      .use(selector())\n      .use(nested)\n      .process(css)\n      .css;\n    fs.writeFileSync('build/output.css', output)\n  })\n```\n\n### Grunt\n\n```\nnpm install grunt-postcss\n```\n\n```js\nmodule.exports = function(grunt) {\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n    postcss: {\n      options: {\n        processors: [\n          require('postcss-custom-selector')(),\n          require('cssgrace'),\n        ]\n      },\n      dist: {\n        src: ['src/*.css'],\n        dest: 'build/grunt.css'\n      }\n    }\n  });\n\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n  grunt.loadNpmTasks('grunt-postcss');\n\n  grunt.registerTask('default', ['postcss']);\n}\n```\n\n### Gulp\n\n```\nnpm install gulp-postcss\n```\n\n```js\nvar gulp = require('gulp');\nvar rename = require('gulp-rename');\nvar postcss = require('gulp-postcss');\nvar cssgrace = require('cssgrace');\nvar autoprefixer = require('autoprefixer-core')\n\ngulp.task('default', function () {\n    var processors = [\n        require('cssgrace')\n    ];\n    gulp.src('src/input.css')\n        .pipe(postcss(processors))\n        .pipe(rename('gulp.css'))\n        .pipe(gulp.dest('build'))\n});\ngulp.watch('src/*.css', ['default']);\n```\n\n## More features\n\n### Automatic generation of 2x background compatible code\n\n\ninput:\n\n```css\n.foo {\n  background-image: -webkit-image-set(\n                    url(../img/yuxifan@1x.jpg) 1x,\n                    url(../img/yuxifan@2x.jpg) 2x);\n}\n```\n\noutput:\n\n```css\n.foo {\n  background-image: url(../img/yuxifan@1x.jpg); /* Fallback */\n  background-image: -webkit-image-set(\n                    url(../img/yuxifan@1x.jpg) 1x,\n                    url(../img/yuxifan@2x.jpg) 2x);\n}\n\n@media only screen and (min-resolution: 2dppx) {\n  .foo {\n    background-image: url(../img/yuxifan@2x.jpg);\n    background-size: 320px 427px;\n}\n}\n```\n\n### Get the background image's width or height\n\nUsing the `image-width` and `image-height` to obtain the image's width or height.\n\n\ninput:\n\n```css\n.foo {\n  background: url(../img/post-and-pre.png);\n  width: image-width;\n  height: image-height;\n}\n\n.foo {\n  background: url(../img/post-and-pre.png);\n  margin: image-width image-height -image-height;\n  content: 'image-width';\n}\n```\n\noutput:\n\n```css\n.foo {\n  background: url(../img/post-and-pre.png);\n  width: 720px;\n  height: 719px;\n}\n\n.foo {\n  background: url(../img/post-and-pre.png);\n  margin: 720px 719px -719px;\n  content: 'image-width';\n}\n```\n\n\n### clear: fix\n\ninput:\n\n```css\n.foo {\n  clear: fix;\n}\n```\n\noutput:\n\n```css\n.foo {\n  *zoom: 1;\n}\n.foo:after {\n  clear: both;\n}\n.foo:before,\n.foo:after {\n  content: '';\n  display: table;\n}\n```\n\nIf there is already can remove floating property, don't generate compatible code.\n\ninput:\n\n```css\n.foo {\n  clear: fix;\n  overflow: hidden;\n}\n```\n\noutput:\n\n```css\n.foo {\n  overflow: hidden;\n}\n```\n\n\n\n### position:center polyfill\n\nAutomatic calculation of margin value, the mother will never have to worry about my math is not good.\n\ninput:\n\n```css\n.foo {\n  position: center;\n  width: 300px;\n  height: 123px;\n}\n```\n\noutput:\n\n```css\n.foo {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  margin-left: -150px;\n  margin-top: -61.5px;\n  width: 300px;\n  height: 123px;\n}\n```\n\n### Repair of common errors\n\n#### Float or absolutely positioned elements don't write display: block\n\n\ninput:\n\n```css\n.foo {\n  position: absolute;\n  display: block;\n}\n\n.foo {\n  position: center;\n  display: block;\n}\n\n.foo {\n  float: left;\n  display: block;\n}\n```\n\noutput:\n\n```css\n.foo {\n  position: absolute;\n}\n\n.foo {\n  position: center;\n}\n\n.foo {\n  float: left;\n}\n```\n\n#### Absolutely positioned elements floating effect\n\nRemove float: left|right.\n\ninput:\n\n```css\n.foo {\n  position: absolute;\n  float: left;\n}\n```\n\noutput:\n\n```css\n.foo {\n  position: absolute;\n}\n```\n\n### Missing property auto completion\n\n#### resize\n\ninput:\n\n```css\n.foo {\n  resize: vertical;\n}\n\n.foo {\n  resize: both;\n  overflow: hidden;\n}\n```\n\noutput:\n\n```css\n.foo {\n  resize: vertical;\n  overflow: auto;\n}\n\n.foo {\n  resize: both;\n  overflow: hidden;\n}\n```\n\n#### text-overflow: ellipsis\n\ninput:\n\n```css\n.foo {\n  text-overflow: ellipsis;\n}\n\n.foo {\n  text-overflow: ellipsis;\n  overflow: auto;\n  white-space: normal;\n}\n\n```\n\noutput:\n\n```css\n.foo {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n.foo {\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n}\n```\n\n### IE Hack\n\n#### IE opacity\n\n\ninput:\n\n```css\n.foo {\n  opacity: .6;\n}\n\n.foo {\n  opacity: 0.8293;\n}\n```\n\noutput:\n\n```css\n.foo {\n  opacity: .6;\n  filter: alpha(opacity=60);\n}\n\n.foo {\n  opacity: 0.8293;\n  filter: alpha(opacity=83);\n}\n```\n\n#### IE RGBA\n\ninput:\n\n```css\n.foo {\n  background: rgba(153, 85, 102, 0.3);\n}\n```\n\noutput:\n\n```css\n.foo {\n  background: rgba(153, 85, 102, 0.3);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#4c995566', endColorstr='#4c995566');\n}\n\n:root .foo {\n  filter: none\\9;\n}\n```\n\n#### IE inline-block\n\ninput:\n\n```css\n.foo {\n  display: inline-block;\n}\n```\n\noutput:\n\n```css\n.foo {\n  display: inline-block;\n  *display: inline;\n  *zoom: 1;\n}\n```\n\n## Contributing\n\n* Install all the dependent modules.\n* Respect the coding style (Use [EditorConfig](http://editorconfig.org/)).\n* Add test cases in the [test](test) directory.\n* Run the test cases.\n\n```\n$ git clone https://github.com/postcss/postcss-media-minmaxs.git\n$ git checkout -b patch\n$ npm install\n$ npm test\n```\n\n## [Changelog](CHANGELOG.md)\n\n## [License](LICENSE)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/cssdream/cssgrace/issues"
  },
  "homepage": "https://github.com/cssdream/cssgrace",
  "_id": "cssgrace@3.0.0",
  "_from": "cssgrace@"
}
