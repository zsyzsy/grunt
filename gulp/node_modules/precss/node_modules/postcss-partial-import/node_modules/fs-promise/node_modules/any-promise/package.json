{
  "name": "any-promise",
  "version": "0.1.0",
  "description": "Resolve any installed ES6 compatible promise",
  "main": "any-promise.js",
  "browser": "any-promise-shim.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/kevinbeaty/any-promise"
  },
  "keywords": [
    "promise",
    "es6"
  ],
  "author": {
    "name": "Kevin Beaty"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/kevinbeaty/any-promise/issues"
  },
  "homepage": "http://github.com/kevinbeaty/any-promise",
  "dependencies": {},
  "devDependencies": {
    "promise": "~6.0.1",
    "es6-promise": "~2.0.1",
    "rsvp": "~3.0.16",
    "bluebird": "~2.5.3",
    "when": "~3.6.4",
    "q": "~1.1.2",
    "native-promise-only": "~0.7.6-a",
    "promises-aplus-tests": "~2.1.0",
    "mocha": "~2.1.0"
  },
  "readme": "## Any Promise\n\n[![Build Status](https://secure.travis-ci.org/kevinbeaty/any-promise.svg)](http://travis-ci.org/kevinbeaty/any-promise)\n\nLet your library support any ES6 compatible Promise library or polyfill and leave the choice to the end user. The end user can install a polyfill or `npm install` their preference before using this library and the installed library will be automatically detected.\n\nAttempts to load libraries in the following order.  The first successful `require` will be exported.\n\n  - [es6-promise](https://github.com/jakearchibald/es6-promise)\n  - [promise](https://github.com/then/promise)\n  - [native-promise-only](https://github.com/getify/native-promise-only)\n  - [bluebird](https://github.com/petkaantonov/bluebird)\n  - [rsvp](https://github.com/tildeio/rsvp.js)\n  - [when](https://github.com/cujojs/when)\n  - [q](https://github.com/kriskowal/q)\n\nIf no library is installed, attempts to export the global `Promise` (native or polyfill). The `browserify` version will always export the the global `Promise`, so polyfill as necessary.\n\nIf you have multiple libraries installed (e.g. for testing), and would like to specify one you can use the `PROMISE_IMPL` env variable.\n\n```javascript\nvar Promise = require('any-promise');\n\nreturn Promise\n  .all([xf, f, init, coll])\n  .then(fn);\n\n\nreturn new Promise(function(resolve, reject){\n  try {\n    resolve(item);\n  } catch(e){\n    reject(e);\n  }\n});\n\n```\n",
  "readmeFilename": "README.md",
  "_id": "any-promise@0.1.0",
  "_from": "any-promise@~0.1.0"
}
