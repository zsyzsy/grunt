{
  "name": "postcss-url",
  "version": "4.0.1",
  "description": "PostCSS plugin to rebase or inline on url().",
  "keywords": [
    "css",
    "postcss",
    "postcss-plugins",
    "url",
    "rebase",
    "inline",
    "base64",
    "assets"
  ],
  "author": {
    "name": "Maxime Thirouin"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/postcss/postcss-url.git"
  },
  "files": [
    "CHANGELOG.md",
    "LICENSE",
    "index.js"
  ],
  "dependencies": {
    "directory-encoder": "^0.6.1",
    "js-base64": "^2.1.5",
    "mime": "^1.2.11",
    "mkdirp": "^0.5.0",
    "path-is-absolute": "^1.0.0",
    "postcss": "^4.1.11",
    "reduce-function-call": "^1.0.1"
  },
  "devDependencies": {
    "eslint": "^0.23.0",
    "postcss-import": "^5.0.0",
    "tape": "^3.0.0"
  },
  "scripts": {
    "test": "eslint . && tape test"
  },
  "readme": "# postcss-url [![Build Status](https://travis-ci.org/postcss/postcss-url.png)](https://travis-ci.org/postcss/postcss-url)\n\n> [PostCSS](https://github.com/postcss/postcss) plugin to rebase, inline or copy on url().\n\n## Installation\n\n```console\n$ npm install postcss-url\n```\n\n## Usage\n\n```js\n// dependencies\nvar fs = require(\"fs\")\nvar postcss = require(\"postcss\")\nvar url = require(\"postcss-url\")\n\n// css to be processed\nvar css = fs.readFileSync(\"input.css\", \"utf8\")\n\n// process css\nvar output = postcss()\n  .use(url({\n    url: \"rebase\" // or \"inline\" or \"copy\"\n  }))\n  .process(css, {\n    // \"rebase\" mode need at least one of those options\n    // \"inline\" mode might need `from` option only\n    // \"copy\" mode need `from` and `to` option to work\n    from: \"src/stylesheet/index.css\"\n    to: \"dist/index.css\"\n  })\n  .css\n```\n\nCheckout [tests](test) for examples.\n\n### Options\n\n#### `url`\n\n_(default: `\"rebase\"`)_\n\n##### `url: \"rebase\"`\n\nAllow you to fix `url()` according to postcss `to` and/or `from` options (rebase to `to` first if available, otherwise `from` or `process.cwd()`).\n\n##### `url: \"inline\"`\n\nAllow you to inline assets using base64 encoding. Can use postcss `from` option to find ressources.\n\n##### `url: \"copy\"`\n\nAllow you to copy and rebase assets according to postcss `to`, `assetsPath` and `from` options (`assetsPath` is relative to the option `to`).\n\n##### `url: {Function}`\n\nCustom transform function. Takes following arguments:\n* `URL` – original url\n* `decl` - related postcss declaration object\n* `from` - from postcss option\n* `dirname` – dirname of processing file\n* `to` – from postcss option\n* `options` – plugin options\n* `result` – postcss result object\n\nAnd should return the transformed url.  \nYou can use this option to adjust urls for CDN.\n\n#### `maxSize`\n\nSpecify the maximum file size to inline (in kbytes)\n\n#### `fallback`\n\nThe url fallback method to use if max size is exceeded or url contains a hash.\nCustom transform functions are supported.\n\n#### `basePath`\n\nSpecify the base path where to search images from\n\n#### `assetsPath`\n\n_(default: `false`)_\n\nIf you specify an `assetsPath`, the assets files will be copied in that\ndestination\n\n#### `useHash`\n\n_(default: `false`)_\n\nIf set to `true` the copy method is going to rename the path of the files by a hash name\n\n---\n\n## Contributing\n\nWork on a branch, install dev-dependencies, respect coding style & run tests before submitting a bug fix or a feature.\n\n```console\n$ git clone https://github.com/postcss/postcss-url.git\n$ git checkout -b patch-1\n$ npm install\n$ npm test\n```\n\n## [Changelog](CHANGELOG.md)\n\n## [License](LICENSE)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/postcss/postcss-url/issues"
  },
  "homepage": "https://github.com/postcss/postcss-url",
  "_id": "postcss-url@4.0.1",
  "_from": "postcss-url@^4.0.1"
}
