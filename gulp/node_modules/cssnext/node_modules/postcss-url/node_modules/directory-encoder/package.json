{
  "name": "directory-encoder",
  "description": "Encode a directory of images to CSS",
  "version": "0.6.1",
  "homepage": "https://github.com/filamentgroup/directory-encoder",
  "author": {
    "name": "John Bender/Jeffrey Lembeck/Filament Group",
    "email": "thegroup@filamentgroup.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/filamentgroup/directory-encoder"
  },
  "bugs": {
    "url": "https://github.com/filamentgroup/directory-encoder/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/filamentgroup/directory-encoder/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/directory-encoder",
  "engines": {
    "node": ">= 0.10.0"
  },
  "scripts": {
    "test": "grunt travis --verbose"
  },
  "dependencies": {
    "fs-extra": "0.8.1",
    "handlebars": "1.1.2",
    "lodash": "2.4.0",
    "img-stats": "0.4.2"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt-contrib-watch": "~0.2.0",
    "grunt": "~0.4.2"
  },
  "keywords": [],
  "readme": "# directory-encoder [![Build Status](https://secure.travis-ci.org/filamentgroup/directory-encoder.png?branch=master)](http://travis-ci.org/filamentgroup/directory-encoder)\n\n[![Filament Group](http://filamentgroup.com/images/fg-logo-positive-sm-crop.png) ](http://www.filamentgroup.com/)\n\nEncode a directory of PNG or SVG images to CSS\n\n## Getting Started\nInstall the module with: `npm install directory-encoder`\n\n```javascript\nvar DirectoryEncoder = require('directory-encoder');\nvar de = new DirectoryEncoder( source, destinationCSSFile, {\n\t\t\tpngfolder: pngfolder, //in case you need to link out for PNGs,\nlike when the datauri is way too long\n\t\t\tcustomselectors: { \"foo\": [\".bar\", \".baz\"]}, \n\t\t\tprefix: \".icon-\", // used to prefix the name of the file for the CSS classname, .icon- is the default\n\t\t\ttemplate: template.hbs, //template in handlebars, FANCY!\n\t\t\tnoencodepng: false // turn this to true if you want no datauris\nfor pngs, just links out to png files\n\t\t});\nde.encode(); // \"Guitar solo -- File outputted\"\n```\n\n## Documentation\n\n### Constructor\n\nTakes three arguments, source directory for encoding/an array of files\nyou'd like to encode, destination css\nfile for when it writes, and an options hash that includes a spot for\ncustomselectors, a hbs template in case you want to get nuts with your\ncss, where the pngs are located if you want to link out to them (or you\ndon't have a choice because the data uri is bigger than 32k), and a\nswitch to turn off datauris for pngs.\n\n### encode\n\nAll the magic happens here.\n\n## Examples\n```\nvar de = new DirectoryEncoder( source, destinationCSSFile, {\n\t\t\tpngfolder: pngfolder, //in case you need to link out for PNGs,\nlike when the datauri is way too long\n\t\t\tcustomselectors: { \"foo\": [\".bar\", \".baz\"]}, \n\t\t\ttemplate: template.hbs, //template in handlebars, FANCY!\n\t\t\tnoencodepng: false // turn this to true if you want no datauris\nfor pngs, just links out to png files\n\t\t});\nde.encode(); // \"Guitar solo -- File outputted\"\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n\n* 0.6.0  Fix encoding brackets and ability to take an array\n* 0.5.0  PNGpath\n* 0.4.0  Width/Height from template\n* 0.3.0  Adding custom selectors that allow for wildcards\n* 0.2.0  Adding switchable icon name prefixes\n* 0.1.0  Woo\n\n## License\nCopyright (c) 2013 John Bender/Jeffrey Lembeck/Filament Group\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "directory-encoder@0.6.1",
  "_from": "directory-encoder@^0.6.1"
}
