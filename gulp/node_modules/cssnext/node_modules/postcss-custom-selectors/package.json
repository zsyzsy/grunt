{
  "name": "postcss-custom-selectors",
  "version": "2.3.0",
  "description": "PostCSS plugin to transform W3C CSS Extensions(Custom Selectors) to more compatible CSS",
  "keywords": [
    "postcss",
    "postcss-plugin",
    "css",
    "selector",
    "custom-selector"
  ],
  "authors": [
    "yisi",
    "Maxime Thirouin"
  ],
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/postcss/postcss-custom-selectors.git"
  },
  "homepage": "https://github.com/postcss/postcss-custom-selectors",
  "bugs": {
    "url": "https://github.com/postcss/postcss-custom-selectors/issues"
  },
  "files": [
    "CHANGELOG.md",
    "LICENSE",
    "dist",
    "README-zh.md"
  ],
  "main": "dist/index.js",
  "dependencies": {
    "balanced-match": "^0.2.0",
    "postcss": "^4.1.7",
    "postcss-selector-matches": "^1.2.1"
  },
  "devDependencies": {
    "babel": "^5.5.8",
    "babel-eslint": "^3.1.15",
    "babel-tape-runner": "^1.1.0",
    "eslint": "^0.23.0",
    "tape": "^4.0.0"
  },
  "scripts": {
    "prepublish": "babel src --out-dir dist",
    "lint": "eslint .",
    "tape": "babel-tape-runner 'test/*.js'",
    "test": "npm run lint && npm run tape"
  },
  "readme": "# PostCSS Custom Selectors\n\n[![Build Status](https://travis-ci.org/postcss/postcss-custom-selectors.svg?branch=master)](https://travis-ci.org/postcss/postcss-custom-selectors)\n[![NPM Downloads](https://img.shields.io/npm/dm/postcss-custom-selectors.svg?style=flat)](https://www.npmjs.com/package/postcss-custom-selectors)\n[![NPM Version](http://img.shields.io/npm/v/postcss-custom-selectors.svg?style=flat)](https://www.npmjs.com/package/postcss-custom-selectors)\n[![License](https://img.shields.io/npm/l/postcss-custom-selectors.svg?style=flat)](http://opensource.org/licenses/MIT)\n\n> [PostCSS](https://github.com/postcss/postcss) plugin to transform  [W3C CSS Extensions(Custom Selectors)](http://dev.w3.org/csswg/css-extensions/#custom-selectors)  to more compatible CSS.\n\n[简体中文](README-zh.md)\n\n![GIF Demo](http://gtms01.alicdn.com/tps/i1/TB1ZCe3GVXXXXbzXFXXRi48IXXX-780-610.gif)\n\n## Installation\n\n```console\n$ npm install postcss-custom-selectors\n```\n\n## Quick Start\n\n```js\n// dependencies\nvar fs = require('fs')\nvar postcss = require('postcss')\nvar selector = require('postcss-custom-selectors')\n\n// css to be processed\nvar css = fs.readFileSync('input.css', 'utf8')\n\n// process css using postcss-custom-selectors\nvar output = postcss()\n  .use(selector())\n  .process(css)\n  .css\n\nconsole.log('\\n====>Output CSS:\\n', output)  \n```\n\nOr just：\n\n```js\nvar output = postcss(selector())\n  .process(css)\n  .css\n```\n\ninput.css：\n\n```css\n@custom-selector :--heading h1, h2, h3, h4, h5, h6;\n\narticle :--heading + p {\n  margin-top: 0;\n}\n```\n\nYou will get:\n\n```css\narticle h1 + p,\narticle h2 + p,\narticle h3 + p,\narticle h4 + p,\narticle h5 + p,\narticle h6 + p {\n  margin-top: 0;\n}\n```\n\n## CSS syntax\n\n```css\n@custom-selector = @custom-selector :<extension-name> <selector>;\n```\n\n## How to use\n\nThe custom selector is a pseudo-class, so you must use `:--` to define it.\n\nFor example to simulate [:any-link](http://dev.w3.org/csswg/selectors/#the-any-link-pseudo) selector:\n\n```css\n@custom-selector :--any-link :link, :visited;\n\na:--any-link {\n  color: blue;\n}\n```\n\noutput:\n\n```css\na:link,\na:visited {\n  color: blue;\n}\n```\n\n## Options\n\n### `lineBreak`\n\n_(default: `true`)_\n\nSet whether  multiple selector wrap.The default is turning on to be a newline.\n\nClose the line breaks.\n\n```js\nvar options = {\n  lineBreak: false\n}\n\nvar output = postcss(selector(options))\n  .process(css)\n  .css\n```\n\nWith the first example, the output will be:\n\n```css\narticle h1 + p, article h2 + p, article h3 + p, article h4 + p, article h5 + p, article h6 + p {\n  margin-top: 0;\n}\n```\n\n### `extensions`\n\n_(default: `{}`)_\n\nThis option allows you to customize an object to set the `<extension-name>` (selector alias) and `<selector>`, these definitions will cover the same alias of `@custom-selector` in CSS.\n\n```js\nvar options = {\n  extensions: {\n    ':--any' : 'section, article, aside, nav'\n  }\n}\n\nvar output = postcss(selector(options))\n  .process(css)\n  .css;\n```\n\ninput.css\n\n```css\n@custom-selector :--any .foo, .bar; /* No effect */\n:--any h1 {\n  margin-top: 16px;\n}\n```\n\noutput:\n\n```css\n/* No effect */\nsection h1,\narticle h1,\naside h1,\nnav h1 {\n  margin-top: 16px;\n}\n```\n\n### `transformMatches`\n\n_(default: `true`)_\n\nAllows you to limit transformation to `:matches()` usage\nIf set to false:\n\ninput\n\n```css\n@custom-selector :--foo .bar, .baz;\n.foo:--foo {\n  margin-top: 16px;\n}\n```\n\noutput\n\n```css\n.foo:matches(.bar, .baz) {\n  margin-top: 16px;\n}\n```\n\n\n## Usage\n\n### Node Watch\n\nDependence [chokidar](https://github.com/paulmillr/chokidar) module.\n\n```js\nvar fs = require('fs')\nvar chokidar = require('chokidar')\nvar postcss = require('postcss')\nvar selector = require('postcss-custom-selectors')\n\nvar src = 'input.css'\n\nconsole.info('Watching…\\nModify the input.css and save.')\n\nchokidar.watch(src, {\n  ignored: /[\\/\\\\]\\./,\n  persistent: true\n}).on('all',\n  function(event, path, stats) {\n    var css = fs.readFileSync(src, 'utf8')\n    var output = postcss(selector())\n      .process(css)\n      .css\n    fs.writeFileSync('output.css', output)\n  })\n```\n\n### Grunt\n\n```js\nmodule.exports = function(grunt) {\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n    postcss: {\n      options: {\n        processors: [\n          require('autoprefixer-core')({ browsers: ['> 0%'] }).postcss, //Other plugin\n          require('postcss-custom-selectors')(),\n        ]\n      },\n      dist: {\n        src: ['src/*.css'],\n        dest: 'build/grunt.css'\n      }\n    }\n  });\n\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n  grunt.loadNpmTasks('grunt-postcss');\n\n  grunt.registerTask('default', ['postcss']);\n}\n```\n\n### Gulp\n\n```js\nvar gulp = require('gulp');\nvar rename = require('gulp-rename');\nvar postcss = require('gulp-postcss');\nvar selector = require('postcss-custom-selectors')\nvar autoprefixer = require('autoprefixer-core')\n\ngulp.task('default', function () {\n    var processors = [\n        autoprefixer({ browsers: ['> 0%'] }), //Other plugin\n        selector()\n    ];\n    gulp.src('src/*.css')\n        .pipe(postcss(processors))\n        .pipe(rename('gulp.css'))\n        .pipe(gulp.dest('build'))\n});\ngulp.watch('src/*.css', ['default']);\n```\n\n## Contributing\n\n* Install the relevant dependent module.\n* Respect coding style（Install [EditorConfig](http://editorconfig.org/)）.\n* Add test cases in the [test](test) directory.\n* Run test.\n\n```console\n$ git clone https://github.com/postcss/postcss-custom-selectors.git\n$ git checkout -b patch\n$ npm install\n$ npm test\n```\n\n## [Changelog](CHANGELOG.md)\n\n## [License](LICENSE)\n",
  "readmeFilename": "README.md",
  "_id": "postcss-custom-selectors@2.3.0",
  "_from": "postcss-custom-selectors@^2.3.0"
}
